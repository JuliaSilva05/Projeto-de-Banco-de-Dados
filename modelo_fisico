CREATE DATABASE IF NOT EXISTS webdriver;
USE webdriver;

CREATE TABLE usuario(
	id_user INT PRIMARY KEY AUTO_INCREMENT,
    	login VARCHAR(10),
    	senha VARCHAR(10),
    	email VARCHAR(30),
	data_ingresso DATE
);

CREATE TABLE arquivo(
	id_arq INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(50),
    tipo VARCHAR(10),
    perm_acesso VARCHAR(20) CHECK (perm_acesso='Proprietário' OR perm_acesso='Convidado'),
    tam_bytes INT,
    ultima_mod DATE,
    hora TIME,
    localizacao VARCHAR(20),
    url VARCHAR(20),
    id_user INT NOT NULL,
    FOREIGN KEY(id_user) REFERENCES usuario(id_user)
);
CREATE TABLE historico(
	id_hist INT PRIMARY KEY AUTO_INCREMENT,
    data_ DATE,
    hora TIME,
    operacao VARCHAR(10) CHECK (operacao='Carregar' OR operacao='Atualizar' OR operacao='Remover'),
    cont_mudado TEXT,
    id_arq INT NOT NULL,
    FOREIGN KEY(id_arq) REFERENCES arquivo(id_arq)
);

CREATE TABLE opera(
	id_op INT PRIMARY KEY AUTO_INCREMENT,
    tipo VARCHAR(10) CHECK (tipo='Carregar' OR tipo='Atualizar' OR tipo='Remover'),
    data_ DATE,
    hora TIME,
	id_user INT NOT NULL,
    id_arq INT NOT NULL,
    FOREIGN KEY(id_user) REFERENCES usuario(id_user),
    FOREIGN KEY(id_arq) REFERENCES arquivo(id_arq)
);

CREATE TABLE administrador(
	id_adm INT PRIMARY AUTO_INCREMENT,
    id_user INT NOT NULL,
    FOREIGN KEY(id_user) REFERENCES usuario(id_user)
);
CREATE TABLE suporte(
	id_sup INT PRIMARY KEY AUTO_INCREMENT,
    descricao VARCHAR(100),
    dia DATE,
    hora TIME,
    id_user INT NOT NULL,
    FOREIGN KEY(id_user) REFERENCES usuario(id_user),
    id_adm INT NOT NULL,
    FOREIGN KEY(id_adm) REFERENCES administrador(id_adm)
);

CREATE TABLE plano(
	id_plano INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(20),
    duracao INT,
    aquisicao DATE,
    espaco_user VARCHAR(30) NOT NULL
);
CREATE TABLE instituicao(
	id_ins INT PRIMARY KEY auto_increment,
    nome VARCHAR(20),
    causa_social VARCHAR(50),
    endereco VARCHAR(100),
    id_plano INT NOT NULL,
    FOREIGN KEY(id_plano) REFERENCES plano(id_plano)
);

CREATE TABLE comentario(
	id_com INT PRIMARY KEY NOT NULL auto_increment,
    conteudo VARCHAR(300),
    data_ DATE,
    hora TIME
);
CREATE TABLE comenta(
	id_user INT NOT NULL,
    id_com INT NOT NULL,
    id_arq INT NOT NULL,
    FOREIGN KEY(id_user) REFERENCES usuario(id_user),
    FOREIGN KEY(id_com) REFERENCES comentario(id_com),
    FOREIGN KEY(id_arq) REFERENCES arquivo(id_arq)
);

CREATE TABLE compartilhamento(
	id_destinatario INT NOT NULL,
    id_dono INT NOT NULL,
    id_arq INT NOT NULL,
    data_ DATE,
    FOREIGN KEY(id_destinatario) REFERENCES usuario(id_user),
    FOREIGN KEY(id_dono) REFERENCES usuario(id_user),
    FOREIGN KEY(id_arq) REFERENCES arquivo(id_arq)
);

CREATE TABLE atividades_recentes(
    id_arquivo INT NOT NULL,
    ultima_versao DATE NOT NULL,
    acesso VARCHAR(20) CHECK (acesso='Prioritário' OR acesso='Não Prioritário'),
    FOREIGN KEY(id_arquivo) REFERENCES arquivo(id_arq)
);

-- PROCEDURES

DELIMITER //

CREATE PROCEDURE Verificar_atividades()
BEGIN
    UPDATE atividades_recentes
    SET ultima_versao = CURDATE();
END //

CREATE PROCEDURE Conta_usuarios(IN arquivo_id INT)
BEGIN
    DECLARE total_usuarios INT;

    SELECT COUNT(DISTINCT id_destinatario) INTO total_usuarios
    FROM compartilhamento
    WHERE id_arq = arquivo_id;

    SELECT total_usuarios AS "Total de Usuários com Acesso";
END //

CREATE PROCEDURE Chavear(IN arquivo_id INT)
BEGIN
    UPDATE arquivo
    SET perm_acesso = CASE
        WHEN perm_acesso = 'Proprietário' THEN 'Convidado'
        ELSE 'Proprietário'
    END
    WHERE id_arq = arquivo_id;
END //

CREATE PROCEDURE Remover_acessos(IN arquivo_id INT)
BEGIN
    DELETE FROM compartilhamento
    WHERE id_arq = arquivo_id
      AND id_destinatario <> (SELECT id_user FROM arquivo WHERE id_arq = arquivo_id);
END //

DELIMITER ;
